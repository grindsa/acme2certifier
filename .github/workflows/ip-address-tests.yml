name: Certificates for IP addresses tests

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  ip_tests:
    name: "ip_tests"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Build container"
      uses: ./.github/actions/container_prep
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

    - name: "Prepare acme_srv.cfg with certifier_ca_handler"
      uses: ./.github/actions/wf_specific/certifier_ca_handler/certifier_setup_no_profile
      with:
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        DATA_PATH: examples/Docker/data

    - name: "Restart a2c"
      run: |
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients

    - name: "Enroll HTTP-01 single domain and ip address "
      run: |
        sudo rm -rf lego/*
        docker run -i -p 80:80 -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme -d $RUNNER_IP --http run
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt --text --noout | grep "IP Address"
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data lego

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: ip_tests-${{ matrix.websrv }}-${{ matrix.dbhandler }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  ip_rpm:
    name: "ip_rpm"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        rhversion: [8, 9]
        execscript: ['rpm_tester.sh', 'django_tester.sh']
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Prepare Alma environment"
      uses: ./.github/actions/rpm_prep
      with:
        GH_SBOM_USER: ${{ secrets.GH_SBOM_USER }}
        GH_SBOM_TOKEN: ${{ secrets.GH_SBOM_TOKEN }}
        RH_VERSION: ${{ matrix.rhversion }}

    - name: "WSGI - Prepare acme_srv.cfg with certifier_ca_handler"
      if: matrix.execscript == 'rpm_tester.sh'
      uses: ./.github/actions/wf_specific/certifier_ca_handler/certifier_setup_no_profile
      with:
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        DATA_PATH: data

    - name: "Django - Prepare acme_srv.cfg with certifier_ca_handler"
      if: matrix.execscript == 'django_tester.sh'
      uses: ./.github/actions/wf_specific/certifier_ca_handler/certifier_setup_no_profile
      with:
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        DATA_PATH: data/volume

    - name: "Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/$EXEC_SCRIPT
      env:
        EXEC_SCRIPT: ${{ matrix.execscript }}

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients

    - name: "Enroll HTTP-01 single domain and ip address "
      run: |
        docker run -i -p 80:80 -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme -d $RUNNER_IP --http run
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt --text --noout | grep "IP Address"
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        sudo rm ${{ github.workspace }}/artifact/data/*.rpm
        docker exec acme-srv cat /etc/nginx/nginx.conf.orig > ${{ github.workspace }}/artifact/data/nginx.conf.orig
        docker exec acme-srv cat /etc/nginx/nginx.conf > ${{ github.workspace }}/artifact/data/nginx.conf
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log lego

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: ip_wsgi_rpm-rh${{ matrix.rhversion }}-${{ matrix.execscript }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
