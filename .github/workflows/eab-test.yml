name: EAB Tests

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  eab_apache2_wsgi:
    name: "eab_apache2_wsgi"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Build container"
      uses: ./.github/actions/container_prep
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

    - name: "Create letsencrypt folder"
      run: |
        mkdir -p certbot
        mkdir -p lego
        mkdir -p acme-sh

    - name: "Prepare acme_srv.cfg with certifier_ca_handler"
      uses: ./.github/actions/wf_specific/certifier_ca_handler/certifier_setup_no_profile
      with:
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        DATA_PATH: examples/Docker/data

    - name: "Restart a2c"
      run: |
        sudo mkdir -p examples/Docker/data/acme_ca/certs
        sudo cp test/ca/sub-ca-key.pem test/ca/sub-ca-crl.pem test/ca/sub-ca-cert.pem test/ca/root-ca-cert.pem examples/Docker/data/acme_ca/
        sudo cp examples/eab_handler/key_file.json examples/Docker/data/acme_ca
        sudo echo -e "\n\n[EABhandler]" >> examples/Docker/data/acme_srv.cfg
        sudo echo "eab_handler_file: /var/www/acme2certifier/examples/eab_handler/json_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "key_file: /var/www/acme2certifier/volume/acme_ca/key_file.json" >> examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart

    - name: "Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "Test http://acme-srv/directory is accessible"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "Test if https://acme-srv/directory is accessible"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory

    - name: "Fail - Register lego"
      id: legofail
      continue-on-error: true
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run

    - name: "Check lego result"
      if: steps.legofail.outcome != 'failure'
      run: |
        echo "legofail outcome is ${{steps.legofail.outcome }}"
        exit 1

    - name: "Enroll lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --eab --kid keyid_02 --hmac dGhpc19pc19hX3ZlcnlfbG9uZ19obWFjX3RvX21ha2Vfc3VyZV90aGF0X2l0c19tb3JlX3RoYW5fMjU2X2JpdHM -d lego.acme --http run
        sudo cat lego/certificates/lego.acme.issuer.crt |  awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}'
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt

    - name: "Fail - Registercertbot without eab-credentials"
      id: certbotfail
      continue-on-error: true
      run: |
         docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "check certbot result "
      if: steps.certbotfail.outcome != 'failure'
      run: |
        echo "certbot outcome is ${{steps.certbotfail.outcome }}"
        exit 1

    - name: "Register certbot using eab-credentials"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email --eab-kid keyid_02 --eab-hmac-key=dGhpc19pc19hX3ZlcnlfbG9uZ19obWFjX3RvX21ha2Vfc3VyZV90aGF0X2l0c19tb3JlX3RoYW5fMjU2X2JpdHM

    - name: "Enroll HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem certbot/live/certbot/cert.pem

    - name: "Fail - Register acme.sh"
      id: acmeshfail
      continue-on-error: true
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --register-account --server http://acme-srv --accountemail 'acme-sh@example.com' --debug 3

    - name: "Check acme.sh result "
      if: steps.acmeshfail.outcome != 'failure'
      run: |
        echo "acmeshfail outcome is ${{steps.acmeshfail.outcome }}"
        exit 1

    - name: "Register acme.sh with eab-credentials"
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --register-account --server http://acme-srv --accountemail 'acme-sh@example.com' --eab-kid keyid_02 --eab-hmac-key dGhpc19pc19hX3ZlcnlfbG9uZ19obWFjX3RvX21ha2Vfc3VyZV90aGF0X2l0c19tb3JlX3RoYW5fMjU2X2JpdHM --debug 3

    - name: "Enroll acme.sh"
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv -d acme-sh.acme --standalone --debug 3 --output-insecure
        openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer

    - name: "rename eab-kid"
      run: |
        sudo sed -i "s/keyid_02/keyid_12/g" examples/Docker/data/acme_ca/key_file.json
        cd examples/Docker/
        docker-compose restart

    - name: "Enroll acme.sh with unknown kid - should fail"
      id: acmekidfail
      continue-on-error: true
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv -d acme-sh.acme --standalone --force --debug 3 --output-insecure

    - name: "Check result "
      if: steps.acmekidfail.outcome != 'failure'
      run: |
        echo "certbot outcome is ${{steps.acmekidfail.outcome }}"
        exit 1

    - name: "Disable eab-kid checking"
      run: |
        sudo echo "eabkid_check_disable: True" >> examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart

    - name: "Enroll acme.sh with unknown kid - should work"
      # id: acmekidfail
      # continue-on-error: true
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv -d acme-sh.acme --standalone --force --debug 3 --output-insecure

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: eab-${{ matrix.websrv }}-${{ matrix.dbhandler }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
