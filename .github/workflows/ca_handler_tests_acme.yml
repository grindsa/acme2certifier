name: CA handler tests - ACME

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    - cron:  '0 2 * * 6'

jobs:
  container_build:
    name: "container_build"
    runs-on: ubuntu-latest
    # Prevent workflows from running in forks
    if: github.repository == 'grindsa/acme2certifier'
    strategy:
      fail-fast: false
      matrix:
        websrv: ['apache2']
        dbhandler: ['wsgi']

    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Build container"
      uses: ./.github/actions/container_build_upload
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

  harica_ca_handler_test:
    name: "harica_ca_handler_test"
    runs-on: ubuntu-latest
    # Prevent workflows from running in forks
    if: github.repository == 'grindsa/acme2certifier'
    needs: container_build
    strategy:
      fail-fast: false
      matrix:
        websrv: ['apache2']
        dbhandler: ['wsgi']

    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: Parse HARICA config
      uses: ./.github/actions/parse-json-secret
      with:
        json_secret: ${{ secrets.HARICA_CFG }}

    - name: "Download container"
      uses: actions/download-artifact@v4
      with:
        name: a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar.gz
        path: /tmp

    - name: "Import container"
      run: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --no-tty --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt update
        sudo apt install -y docker-compose-plugin
        gunzip /tmp/a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar.gz
        docker load -i /tmp/a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar
        docker images

    - name: "Prepare container environment"
      uses: ./.github/actions/container_prep
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}
        CONTAINER_BUILD: false

    - name: "Generate UUID"
      run: |
        echo UUID=$(uuidgen | cut -d "-" -f1) >> $GITHUB_ENV
    - run: echo "UUID ${{ env.UUID }}"

    - name: "Setup acme_ca_handler"
      run: |
        sudo mkdir -p examples/Docker/data/acme
        sudo chmod -R 777 examples/Docker/data/acme
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/acme_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "acme_keyfile: volume/acme/harica_staging_private_key.json" >> examples/Docker/data/acme_srv.cfg
        sudo echo "acme_url: $ACME_URL" >> examples/Docker/data/acme_srv.cfg
        sudo echo "acme_account_email: $ACME_ACCOUNT_EMAIL" >> examples/Docker/data/acme_srv.cfg
        # sudo echo "eab_kid: $EAB_KID" >> examples/Docker/data/acme_srv.cfg
        # sudo echo "eab_hmac: $EAB_HMAC" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/challenge_validation_disable: False/challenge_validation_disable: True/g" examples/Docker/data/acme_srv.cfg
        sudo echo "allowed_domainlist: [\"*.$DOMAIN\", \"*.acme\"]" >> examples/Docker/data/acme_srv.cfg
        cat examples/Docker/data/acme_srv.cfg
      env:
        ACME_ACCOUNT_EMAIL: ${{ secrets.EMAIL }}

    - name: "Bring up a2c container"
      uses: ./.github/actions/container_up
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

    - name: "Test enrollment"
      uses: ./.github/actions/wf_specific/acme_ca_handler/harica_enroll
      with:
        DEPLOYMENT_TYPE: "container"
        HOSTNAME_SUFFIX: -${{ env.UUID }}

    - name: "Verify allowed_domainlist error"
      run: |
        cd examples/Docker
        docker compose logs | grep "allowed_domainlist" | grep -i "either CN or SANs are not allowed by configuration"

    - name: "Check acme account found in keyfile"
      run: |
        cd examples/Docker
        docker compose logs | grep -i "found in keyfile"

    - name: "Check container configuration"
      uses: ./.github/actions/container_check
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

    - name: "[ * ] collecting test data"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        cd examples/Docker
        docker compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data docker-compose.log

    - name: "[ * ] uploading artifacts"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: harica_container-${{ matrix.websrv }}-${{ matrix.dbhandler }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/


  cleanup:
    name: "cleanup"
    runs-on: ubuntu-latest
    # Prevent workflows from running in forks
    if: github.repository == 'grindsa/acme2certifier'
    needs: [harica_ca_handler_test]
    strategy:
      fail-fast: false
      matrix:
        websrv: ['apache2']
        dbhandler: ['wsgi']

    steps:
    - uses: geekyeggo/delete-artifact@v5
      with:
        name: a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar.gz
