name: CA handler Tests - Hashicorp Vault

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  vault_handler_tests:
    name: "vault_handler_tests"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Build container"
      uses: ./.github/actions/container_prep
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

    - name: "Instanciate vault"
      uses: ./.github/actions/wf_specific/vault_ca_handler/vault_prep
      with:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WORKING_DIR: ${{ github.workspace }}/examples/Docker

    - name: "Setup a2c with vault_ca_handler"
      run: |
        mkdir -p examples/Docker/data/
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/vault_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "vault_url: https://vault.acme:8200" >> examples/Docker/data/acme_srv.cfg
        sudo echo "vault_path: pki_int" >> examples/Docker/data/acme_srv.cfg
        sudo echo "vault_role: serverauth" >> examples/Docker/data/acme_srv.cfg
        sudo echo "vault_token: $VAULT_TOKEN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: False" >> examples/Docker/data/acme_srv.cfg
        sudo echo "enrollment_config_log: True" >> examples/Docker/data/acme_srv.cfg
        sudo echo "allowed_domainlist: [\"*.acme\", \"*.bar.local\"]" >> examples/Docker/data/acme_srv.cfg
        # sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout:15/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker compose restart
      env:
        VAULT_TOKEN: ${{ env.VAULT_TOKEN }}

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients
      with:
        USE_CERTBOT: "true"
        TEST_ADL: "true"

    - name: "Verify allowed_domainlist error"
      run: |
        cd examples/Docker
        docker compose logs | grep "allowed_domainlist" | grep -i "either CN or SANs are not allowed by configuration"

    - name: "ACME Profiling - setup a2c with vault_ca_handler"
      run: |
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nprofiles={\"serverauth\": \"http:\/\/foo.bar\/serverauth\", \"clientauth\": \"http:\/\/foo.bar\/clientauth\", \"bar-dot-local\": \"http:\/\/foo.bar\/bar-dot-local\"}/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker compose restart
      env:
        VAULT_TOKEN: ${{ env.VAULT_TOKEN }}

    - name: "ACME Profiling - enrollment"
      uses: ./.github/actions/wf_specific/vault_ca_handler/enroll_acmeprofile

    - name: "EAB ACME Profiling - setup a2c with vault_ca_handler"
      run: |
        sudo echo "eab_profiling: True" >> examples/Docker/data/acme_srv.cfg
        sudo echo -e "\n[EABhandler]" >> examples/Docker/data/acme_srv.cfg
        sudo echo "eab_handler_file: /var/www/acme2certifier/examples/eab_handler/kid_profile_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "key_file: volume/kid_profiles.json" >> examples/Docker/data/acme_srv.cfg

        sudo cp examples/eab_handler/kid_profiles.json examples/Docker/data/kid_profiles.json
        sudo chmod 777 examples/eab_handler/kid_profiles.json
        sudo sed -i "s/\"profile_id\"\: \[\"profile_1\", \"profile_2\", \"profile_3\"\]/\"vault_role\"\: \[\"clientauth\", \"serverauth\"\]/g" examples/Docker/data/kid_profiles.json
        sudo sed -i "s/\"profile_id\"\: \"profile_2\"/\"vault_role\"\: \"servers\"/g" examples/Docker/data/kid_profiles.json
        sudo sed -i "s/\"ca_name\": \"example_ca_2\",/\"vault_path\": \"pki\"/" examples/Docker/data/kid_profiles.json
        sudo sed -i "s/\"ca_name\": \"example_ca\",/\"unknown\": \"unknown\"/g" examples/Docker/data/kid_profiles.json
        sudo sed -i "s/example.net/acme/g" examples/Docker/data/kid_profiles.json
        sudo sed -i '18,19d' examples/Docker/data/kid_profiles.json
        sudo sed -i '8,9d' examples/Docker/data/kid_profiles.json
        cd examples/Docker/
        docker compose restart

    - name: "EAB ACME Profiling - enrollment"
      uses: ./.github/actions/wf_specific/vault_ca_handler/enroll_eab_acmeprofile

    - name: "Check container configuration"
      uses: ./.github/actions/container_check
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        # sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        # sudo cp -rp certbot/ ${{ github.workspace }}/artifact/certbot/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data docker-compose.log # acme-sh lego # certbot

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: vault_handler_tests-${{ matrix.websrv }}-${{ matrix.dbhandler }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  vault_handler_tests_rpm:
    name: "  vault_handler_tests_rpm"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rhversion: [8, 9]
        execscript: ['rpm_tester.sh', 'django_tester.sh']

    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Prepare Alma environment"
      uses: ./.github/actions/rpm_prep
      with:
        GH_SBOM_USER: ${{ secrets.GH_SBOM_USER }}
        GH_SBOM_TOKEN: ${{ secrets.GH_SBOM_TOKEN }}
        RH_VERSION: ${{ matrix.rhversion }}

    - name: "Instanciate vault"
      uses: ./.github/actions/wf_specific/vault_ca_handler/vault_prep
      with:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WORKING_DIR: ${{ github.workspace }}/examples/Docker

    - name: "Wsgi - Setup a2c with vault_ca_handler"
      if: matrix.execscript == 'rpm_tester.sh'
      run: |
        sudo mkdir -p data/acme_ca/certs
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg data/acme_srv.cfg
        sudo chmod 777 data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/acme_srv.cfg
        sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/vault_ca_handler.py" >> data/acme_srv.cfg
        sudo echo "vault_url: https://vault.acme:8200" >> data/acme_srv.cfg
        sudo echo "vault_path: pki_int" >> data/acme_srv.cfg
        sudo echo "vault_role: serverauth" >> data/acme_srv.cfg
        sudo echo "vault_token: $VAULT_TOKEN" >> data/acme_srv.cfg
        sudo echo "ca_bundle: False" >> data/acme_srv.cfg
        sudo echo "enrollment_config_log: True" >> data/acme_srv.cfg
        sudo echo "allowed_domainlist: [\"*.acme\", \"*.bar.local\"]" >> data/acme_srv.cfg
        # sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout:15/g" data/acme_srv.cfg
        # sudo cat data/acme_srv.cfg
      env:
        VAULT_TOKEN: ${{ env.VAULT_TOKEN }}

    - name: "Django - Setup a2c with vault_ca_handler"
      if: matrix.execscript == 'django_tester.sh'
      run: |
        sudo mkdir -p data/volume/acme_ca/certs
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg data/volume/acme_srv.cfg
        sudo chmod 777 data/volume/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/volume/acme_srv.cfg
        sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/vault_ca_handler.py" >> data/volume/acme_srv.cfg
        sudo echo "vault_url: https://vault.acme:8200" >> data/volume/acme_srv.cfg
        sudo echo "vault_path: pki_int" >> data/volume/acme_srv.cfg
        sudo echo "vault_role: serverauth" >> data/volume/acme_srv.cfg
        sudo echo "vault_token: $VAULT_TOKEN" >> data/volume/acme_srv.cfg
        sudo echo "ca_bundle: False" >> data/volume/acme_srv.cfg
        sudo echo "enrollment_config_log: True" >> data/volume/acme_srv.cfg
        sudo echo "allowed_domainlist: [\"*.acme\", \"*.bar.local\"]" >> data/volume/acme_srv.cfg
        # sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout:15/g" data/volume/acme_srv.cfg
        # sudo cat data/volume/acme_srv.cfg
      env:
        VAULT_TOKEN: ${{ env.VAULT_TOKEN }}

    - name: "Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/$EXEC_SCRIPT
        docker ps -a
      env:
        EXEC_SCRIPT: ${{ matrix.execscript }}

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients
      with:
        USE_CERTBOT: "true"
        TEST_ADL: "true"

    - name: "WSGI - ACME Profiling - setup a2c with vault_ca_handler"
      if: matrix.execscript == 'rpm_tester.sh'
      run: |
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nprofiles={\"serverauth\": \"http:\/\/foo.bar\/serverauth\", \"clientauth\": \"http:\/\/foo.bar\/clientauth\", \"bar-dot-local\": \"http:\/\/foo.bar\/bar-dot-local\"}/g" data/acme_srv.cfg
      env:
        VAULT_TOKEN: ${{ env.VAULT_TOKEN }}

    - name: "Django - ACME Profiling - setup a2c with vault_ca_handler"
      if: matrix.execscript == 'django_tester.sh'
      run: |
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nprofiles={\"serverauth\": \"http:\/\/foo.bar\/serverauth\", \"clientauth\": \"http:\/\/foo.bar\/clientauth\", \"bar-dot-local\": \"http:\/\/foo.bar\/bar-dot-local\"}/g" data/volume/acme_srv.cfg
      env:
        VAULT_TOKEN: ${{ env.VAULT_TOKEN }}

    - name: "Reconfigure a2c"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/$EXEC_SCRIPT  restart
      env:
        EXEC_SCRIPT: ${{ matrix.execscript }}

    - name: "ACME Profiling - enrollment"
      uses: ./.github/actions/wf_specific/vault_ca_handler/enroll_acmeprofile

    - name: "WSGI - EAB ACME Profiling - setup a2c with vault_ca_handler"
      if: matrix.execscript == 'rpm_tester.sh'
      run: |
        sudo echo "eab_profiling: True" >> data/acme_srv.cfg
        sudo echo -e "\n[EABhandler]" >> data/acme_srv.cfg
        sudo echo "eab_handler_file: /opt/acme2certifier/examples/eab_handler/kid_profile_handler.py" >> data/acme_srv.cfg
        sudo echo "key_file: /opt/acme2certifier/volume/acme_ca/kid_profiles.json" >> data/acme_srv.cfg

        sudo cp examples/eab_handler/kid_profiles.json data/acme_ca/kid_profiles.json
        sudo chmod 777 data/acme_ca/kid_profiles.json
        sudo sed -i "s/\"profile_id\"\: \[\"profile_1\", \"profile_2\", \"profile_3\"\]/\"vault_role\"\: \[\"clientauth\", \"serverauth\"\]/g" data/acme_ca/kid_profiles.json
        sudo sed -i "s/\"profile_id\"\: \"profile_2\"/\"vault_role\"\: \"servers\"/g" data/acme_ca/kid_profiles.json
        sudo sed -i "s/\"ca_name\": \"example_ca_2\",/\"vault_path\": \"pki\"/" data/acme_ca/kid_profiles.json
        sudo sed -i "s/\"ca_name\": \"example_ca\",/\"unknown\": \"unknown\"/g" data/acme_ca/kid_profiles.json
        sudo sed -i "s/example.net/acme/g" data/acme_ca/kid_profiles.json
        sudo sed -i '18,19d' data/acme_ca/kid_profiles.json
        sudo sed -i '8,9d' data/acme_ca/kid_profiles.json

    - name: "Django - EAB ACME Profiling - setup a2c with vault_ca_handler"
      if: matrix.execscript == 'django_tester.sh'
      run: |
        sudo echo "eab_profiling: True" >> data/volume/acme_srv.cfg
        sudo echo -e "\n[EABhandler]" >> data/volume/acme_srv.cfg
        sudo echo "eab_handler_file: /opt/acme2certifier/examples/eab_handler/kid_profile_handler.py" >> data/volume/acme_srv.cfg
        sudo echo "key_file: /opt/acme2certifier/volume/acme_ca/kid_profiles.json" >> data/volume/acme_srv.cfg

        sudo cp examples/eab_handler/kid_profiles.json data/volume/acme_ca/kid_profiles.json
        sudo chmod 777 data/volume/acme_ca/kid_profiles.json
        sudo sed -i "s/\"profile_id\"\: \[\"profile_1\", \"profile_2\", \"profile_3\"\]/\"vault_role\"\: \[\"clientauth\", \"serverauth\"\]/g" data/volume/acme_ca/kid_profiles.json
        sudo sed -i "s/\"profile_id\"\: \"profile_2\"/\"vault_role\"\: \"servers\"/g" data/volume/acme_ca/kid_profiles.json
        sudo sed -i "s/\"ca_name\": \"example_ca_2\",/\"vault_path\": \"pki\"/" data/volume/acme_ca/kid_profiles.json
        sudo sed -i "s/\"ca_name\": \"example_ca\",/\"unknown\": \"unknown\"/g" data/volume/acme_ca/kid_profiles.json
        sudo sed -i "s/example.net/acme/g" data/volume/acme_ca/kid_profiles.json
        sudo sed -i '18,19d' data/volume/acme_ca/kid_profiles.json
        sudo sed -i '8,9d' data/volume/acme_ca/kid_profiles.json

    - name: "Reconfigure a2c"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/$EXEC_SCRIPT  restart
      env:
        EXEC_SCRIPT: ${{ matrix.execscript }}

    - name: "EAB ACME Profiling - enrollment"
      uses: ./.github/actions/wf_specific/vault_ca_handler/enroll_eab_acmeprofile

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo rm ${{ github.workspace }}/artifact/data/*.rpm
        docker exec acme-srv cat /etc/nginx/nginx.conf.orig > ${{ github.workspace }}/artifact/data/nginx.conf.orig
        docker exec acme-srv cat /etc/nginx/nginx.conf > ${{ github.workspace }}/artifact/data/nginx.conf
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: vault-rh${{ matrix.rhversion }}-{{ matrix.execscript }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
