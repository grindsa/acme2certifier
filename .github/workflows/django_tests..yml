name: Django Tests

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  django_mariadb:
    name: "django_mariadb"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        websrv: ['apache2', 'nginx']

    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Build container"
      uses: ./.github/actions/container_prep
      with:
        DB_HANDLER: "django"
        WEB_SRV: ${{ matrix.websrv }}
        DJANGO_DB: "mariadb"

    - name: "Prepare acme_srv.cfg with certifier_ca_handler"
      uses: ./.github/actions/wf_specific/certifier_ca_handler/certifier_setup_no_profile
      with:
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        DATA_PATH: examples/Docker/data

    - name: "Restart a2c"
      run: |
        cd examples/Docker/
        sudo echo "[Directory]" >> data/acme_srv.cfg
        sudo echo "url_prefix: /foo" >> data/acme_srv.cfg
        grep -i 'django.db.backends.mysql' data/settings.py
        docker-compose restart

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients

    - name: "Check container configuration"
      uses: ./.github/actions/container_check
      with:
        DB_HANDLER: "django"
        WEB_SRV: ${{ matrix.websrv }}

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      continue-on-error: true
      run: |
        docker exec mariadbsrv mariadb-dump -u root --password=foobar acme2certifier > /tmp/acme2certifer.sql
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp /tmp/acme2certifer.sql ${{ github.workspace }}/artifact/data/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: ${{ matrix.websrv }}-mariadb.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  django_psql:
    name: "django_psql"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        websrv: ['apache2', 'nginx']
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Build container"
      uses: ./.github/actions/container_prep
      with:
        DB_HANDLER: "django"
        WEB_SRV: ${{ matrix.websrv }}
        DJANGO_DB: "psql"

    - name: "Prepare acme_srv.cfg with certifier_ca_handler"
      uses: ./.github/actions/wf_specific/certifier_ca_handler/certifier_setup_no_profile
      with:
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        DATA_PATH: examples/Docker/data

    - name: "Restart a2c"
      run: |
        cd examples/Docker/
        sudo echo "[Directory]" >> data/acme_srv.cfg
        sudo echo "url_prefix: /foo" >> data/acme_srv.cfg
        grep -i 'django.db.backends.postgresql_psycopg2' data/settings.py
        docker-compose restart

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients

    - name: "Check container configuration"
      uses: ./.github/actions/container_check
      with:
        DB_HANDLER: "django"
        WEB_SRV: ${{ matrix.websrv }}

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      continue-on-error: true
      run: |
        docker run -v "$(pwd)/examples/Docker/data/pgsql/pgpass":/root/.pgpass --rm --network acme postgres pg_dump -U postgres -h postgresdbsrv acme2certifier > /tmp/acme2certifier.psql
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp /tmp/acme2certifier.psql ${{ github.workspace }}/artifact/data/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: ${{ matrix.websrv }}-psql.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  rpm_build_and_upload:
    name: "rpm_build_and_upload"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Build rpm package"
      id: rpm_build
      uses: ./.github/actions/rpm_build_upload


  nginx_django_rpm_sqlite:
    name: "nginx_django_rpm_sqlite"
    runs-on: ubuntu-latest
    needs: rpm_build_and_upload
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        rhversion: [8, 9]
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Prepare Alma environment"
      uses: ./.github/actions/rpm_prep
      with:
        GH_SBOM_USER: ${{ secrets.GH_SBOM_USER }}
        GH_SBOM_TOKEN: ${{ secrets.GH_SBOM_TOKEN }}
        RH_VERSION: ${{ matrix.rhversion }}
        RPM_BUILD: false

    - name: Download rpm package
      uses: actions/download-artifact@v4
      with:
        name: acme2certifier-${{ github.run_id }}.noarch.rpm
        path: data/

    - name: "Prepare acme_srv.cfg with certifier_ca_handler"
      uses: ./.github/actions/wf_specific/certifier_ca_handler/certifier_setup_no_profile
      with:
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        DATA_PATH: data/volume

    - name: "Modify Django setup"
      run: |
        sudo mkdir -p data/volume/acme_ca/certs
        grep -i 'django.db.backends.sqlite3' data/acme2certifier/settings.py

    - name: "Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/django_tester.sh

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      continue-on-error: true
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        docker exec acme-srv tar cvfz /tmp/acme2certifier/nginx.tgz /etc/nginx
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo rm ${{ github.workspace }}/artifact/data/*.rpm
        docker exec acme-srv cat /etc/nginx/nginx.conf.orig > ${{ github.workspace }}/artifact/data/nginx.conf.orig
        docker exec acme-srv cat /etc/nginx/nginx.conf > ${{ github.workspace }}/artifact/data/nginx.conf
        docker exec acme-srv rpm -qa > ${{ github.workspace }}/artifact/data/packages.txt
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log acme-sh

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: nginx_django_rpm_sqlite-rh${{ matrix.rhversion }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  nginx_django_rpm_mariadb:
    name: "nginx_django_rpm_mariadb"
    runs-on: ubuntu-latest
    needs: rpm_build_and_upload
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        rhversion: [9]
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Prepare Alma environment"
      uses: ./.github/actions/rpm_prep
      with:
        GH_SBOM_USER: ${{ secrets.GH_SBOM_USER }}
        GH_SBOM_TOKEN: ${{ secrets.GH_SBOM_TOKEN }}
        RH_VERSION: ${{ matrix.rhversion }}
        DJANGO_DB: mariadb
        RPM_BUILD: false

    - name: "Retrieve Version from version.py"
      run: |
        echo TAG_NAME=$(cat acme_srv/version.py | grep -i __version__ | head -n 1 | sed 's/__version__ = //g' | sed s/\"//g) >> $GITHUB_ENV
    - run: echo "Latest tag is ${{ env.TAG_NAME }}"

    - name: Download rpm package
      uses: actions/download-artifact@v4
      with:
        name: acme2certifier-${{ github.run_id }}.noarch.rpm
        path: data/

    - name: "Prepare acme_srv.cfg with certifier_ca_handler"
      uses: ./.github/actions/wf_specific/certifier_ca_handler/certifier_setup_no_profile
      with:
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        DATA_PATH: data/volume

    - name: "Modify Django setup"
      run: |
        grep -i 'django.db.backends.mysql' data/acme2certifier/settings.py

    - name: "Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/django_tester.sh

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      continue-on-error: true
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        docker exec acme-srv tar cvfz /tmp/acme2certifier/nginx.tgz /etc/nginx
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo rm ${{ github.workspace }}/artifact/data/*.rpm
        docker exec acme-srv cat /etc/nginx/nginx.conf.orig > ${{ github.workspace }}/artifact/data/nginx.conf.orig
        docker exec acme-srv cat /etc/nginx/nginx.conf > ${{ github.workspace }}/artifact/data/nginx.conf
        docker exec acme-srv rpm -qa | sort -n > ${{ github.workspace }}/artifact/data/packages.txt
        docker exec mariadbsrv mariadb-dump -u root --password=foobar acme2certifier > ${{ github.workspace }}/artifact/data/acme2certifer.sql
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log acme-sh /tmp/mysql

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: nginx_django_rpm_mariadb-rh${{ matrix.rhversion }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  nginx_django_rpm_psql:
    name: "nginx_django_rpm_psql"
    runs-on: ubuntu-latest
    needs: rpm_build_and_upload
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        rhversion: [8, 9]
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Prepare Alma environment"
      uses: ./.github/actions/rpm_prep
      with:
        GH_SBOM_USER: ${{ secrets.GH_SBOM_USER }}
        GH_SBOM_TOKEN: ${{ secrets.GH_SBOM_TOKEN }}
        RH_VERSION: ${{ matrix.rhversion }}
        DJANGO_DB: psql
        RPM_BUILD: false

    - name: "Retrieve version from version.py"
      run: |
        echo TAG_NAME=$(cat acme_srv/version.py | grep -i __version__ | head -n 1 | sed 's/__version__ = //g' | sed s/\"//g) >> $GITHUB_ENV
    - run: echo "Latest tag is ${{ env.TAG_NAME }}"

    - name: Download rpm package
      uses: actions/download-artifact@v4
      with:
        name: acme2certifier-${{ github.run_id }}.noarch.rpm
        path: data/

    - name: "Prepare acme_srv.cfg with certifier_ca_handler"
      uses: ./.github/actions/wf_specific/certifier_ca_handler/certifier_setup_no_profile
      with:
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        DATA_PATH: data/volume


    - name: "Prepare acme_srv.cfg with openssl_ca_handler"
      run: |
        grep -i 'django.db.backends.postgresql_psycopg2' data/acme2certifier/settings.py

    - name: "Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/django_tester.sh

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      continue-on-error: true
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        docker exec acme-srv tar cvfz /tmp/acme2certifier/nginx.tgz /etc/nginx
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo rm ${{ github.workspace }}/artifact/data/*.rpm
        docker exec acme-srv cat /etc/nginx/nginx.conf.orig > ${{ github.workspace }}/artifact/data/nginx.conf.orig
        docker exec acme-srv cat /etc/nginx/nginx.conf > ${{ github.workspace }}/artifact/data/nginx.conf
        docker exec acme-srv rpm -qa > ${{ github.workspace }}/artifact/data/packages.txt
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log acme-sh /tmp/pgsql

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: nginx_django_rpm_psql-rh${{ matrix.rhversion }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  rpm_cleanup:
    name: "rpm_cleanup"
    runs-on: ubuntu-latest
    needs: [nginx_django_rpm_psql, nginx_django_rpm_mariadb, nginx_django_rpm_sqlite]
    steps:
    - name: "Delete artifact"
      uses: geekyeggo/delete-artifact@v5
      with:
        name: acme2certifier-${{ github.run_id }}.noarch.rpm
