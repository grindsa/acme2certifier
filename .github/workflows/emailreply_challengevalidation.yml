name: Tests email-reply challengevalidation

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  emailreply_challenge_tests:
    name: "emailreply_challenge_tests"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']

    steps:
    - name: "Checkout GIT"
      uses: actions/checkout@v4

    - name: "Build container"
      uses: ./.github/actions/container_prep
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}
        # CONTAINER_BUILD: "false"

    - name: "Install mailserver"
      uses: ./.github/actions/wf_specific/emailreply_challengevalidation/mailserver_install
      with:
        MAILSERVER_CERT: ${{ secrets.MAILSERVER_CERT }}

    - name: "Setup a2c with xca_ca_handler"
      run: |
        sudo mkdir -p examples/Docker/data/xca
        sudo chmod -R 777 examples/Docker/data/xca
        sudo cp test/ca/acme2certifier-clean.xdb examples/Docker/data/xca/$XCA_DB_NAME
        sudo mkdir -p examples/Docker/data/acme_ca/certs
        sudo cp test/ca/sub-ca-key.pem test/ca/sub-ca-crl.pem test/ca/sub-ca-cert.pem test/ca/root-ca-cert.pem examples/Docker/data/acme_ca/
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: /var/www/acme2certifier/examples/ca_handler/xca_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "xdb_file: volume/xca/$XCA_DB_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "issuing_ca_name: $XCA_ISSUING_CA" >> examples/Docker/data/acme_srv.cfg
        sudo echo "passphrase: $XCA_PASSPHRASE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_cert_chain_list: [\"root-ca\"]" >> examples/Docker/data/acme_srv.cfg
        # sudo echo "template_name: $XCA_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "allowed_domainlist: [\"bar.local\", \"*.acme\"]" >> examples/Docker/data/acme_srv.cfg

        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nemail_identifier_support: True\nemail_identifier_rewrite: True\ndns_validation_pause_timer: 5/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/debug: True/debug: True\nimap_server: mailserver.acme\nimap_port: 993\nimap_use_ssl: True\nsmtp_port: 587\nsmtp_use_tls: True\nusername: a2c@mailserver.acme\npassword: a2cstarter\nemail_address: a2c@mailserver.acme/g" examples/Docker/data/acme_srv.cfg

        cd examples/Docker/
        docker-compose restart
      env:
        XCA_PASSPHRASE: ${{ secrets.XCA_PASSPHRASE }}
        XCA_ISSUING_CA: ${{ secrets.XCA_ISSUING_CA }}
        XCA_TEMPLATE: ${{ secrets.XCA_TEMPLATE }}
        XCA_DB_NAME: ${{ secrets.XCA_DB_NAME }}

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients
      with:
        TEST_ADL: "true"

    - name: "Install and enroll via acme-email"
      uses: ./.github/actions/wf_specific/emailreply_challengevalidation/acme_email_enroll

    - name: "Test http://acme-srv/directory is accessible"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "Test if https://acme-srv/directory is accessible"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory

    - name: "Enroll lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego --tls-skip-verify -s https://acme-srv -a --email "lego@example.com" --user-agent foo-bar-doo  -d lego.acme --http run
        sudo cat lego/certificates/lego.acme.issuer.crt | awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}'
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt

    - name: "Install and enroll via acme-email"
      uses: ./.github/actions/wf_specific/emailreply_challengevalidation/acme_email_enroll
      with:
        INSTALL: "true"
        TO_FAIL: "true"

    - name: "Disable Challenge validation"
      run: |
        sudo sed -i "s/challenge_validation_disable: False/challenge_validation_disable: True/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart

    - name: "enroll via acme-email"
      uses: ./.github/actions/wf_specific/emailreply_challengevalidation/acme_email_enroll
      with:
        TO_FAIL: "false"

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp mailserver/ ${{ github.workspace }}/artifact/mailserver/
        sudo mkdir -p ${{ github.workspace }}/artifact/acme_email
        sudo cp acme_email/lets* ${{ github.workspace }}/artifact/acme_email/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        docker logs mailserver 2>&1 > ${{ github.workspace }}/artifact/mailserver.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log mailserver.log data acme_email mailserver

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: emailreply_challenge_tests-${{ matrix.websrv }}-${{ matrix.dbhandler }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  emailreply_challenge_tests_rpm:
    name: "emailreply_challenge_tests_rpm"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rhversion: [8, 9]
        execscript: ['rpm_tester.sh', 'django_tester.sh']

    steps:

    - name: "Checkout GIT"
      uses: actions/checkout@v4

    - name: "Prepare Alma environment"
      uses: ./.github/actions/rpm_prep
      with:
        GH_SBOM_USER: ${{ secrets.GH_SBOM_USER }}
        GH_SBOM_TOKEN: ${{ secrets.GH_SBOM_TOKEN }}
        RH_VERSION: ${{ matrix.rhversion }}

    - name: "Install mailserver"
      uses: ./.github/actions/wf_specific/emailreply_challengevalidation/mailserver_install
      with:
        MAILSERVER_CERT: ${{ secrets.MAILSERVER_CERT }}

    - name: "Wsgi - Setup a2c with xca_ca_handler"
      if: matrix.execscript == 'rpm_tester.sh'
      run: |
        mkdir -p data/acme_ca
        sudo cp test/ca/acme2certifier-clean.xdb data/acme_ca/$XCA_DB_NAME
        sudo cp test/ca/sub-ca-key.pem test/ca/sub-ca-crl.pem test/ca/sub-ca-cert.pem test/ca/root-ca-cert.pem data/acme_ca/
        sudo touch data/acme_srv.cfg
        sudo chmod 777 data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/acme_srv.cfg
        sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/xca_ca_handler.py" >> data/acme_srv.cfg
        sudo echo "xdb_file: volume/acme_ca/$XCA_DB_NAME" >> data/acme_srv.cfg
        sudo echo "issuing_ca_name: $XCA_ISSUING_CA" >> data/acme_srv.cfg
        sudo echo "passphrase: $XCA_PASSPHRASE" >> data/acme_srv.cfg
        sudo echo "ca_cert_chain_list: [\"root-ca\"]" >> data/acme_srv.cfg
        # sudo echo "template_name: $XCA_TEMPLATE" >> data/acme_srv.cfg
        sudo echo "allowed_domainlist: [\"bar.local\", \"*.acme\"]" >> data/acme_srv.cfg

        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nemail_identifier_support: True\nemail_identifier_rewrite: True\ndns_validation_pause_timer: 5/g" data/acme_srv.cfg
        sudo sed -i "s/debug: True/debug: True\nimap_server: mailserver.acme\nimap_port: 993\nimap_use_ssl: True\nsmtp_port: 587\nsmtp_use_tls: True\nusername: a2c@mailserver.acme\npassword: a2cstarter\nemail_address: a2c@mailserver.acme/g" data/acme_srv.cfg
      env:
        XCA_PASSPHRASE: ${{ secrets.XCA_PASSPHRASE }}
        XCA_ISSUING_CA: ${{ secrets.XCA_ISSUING_CA }}
        XCA_TEMPLATE: ${{ secrets.XCA_TEMPLATE }}
        XCA_DB_NAME: ${{ secrets.XCA_DB_NAME }}

    - name: "Django - Setup acme_srv.cfg with xca_ca_handler"
      if: matrix.execscript == 'django_tester.sh'
      run: |
        mkdir -p data/volume/acme_ca/certs
        sudo cp test/ca/acme2certifier-clean.xdb data/volume/acme_ca/$XCA_DB_NAME
        sudo cp test/ca/sub-ca-key.pem test/ca/sub-ca-crl.pem test/ca/sub-ca-cert.pem test/ca/root-ca-cert.pem data/volume/acme_ca/
        sudo touch data/volume/acme_srv.cfg
        sudo chmod 777 data/volume/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/volume/acme_srv.cfg
        sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/xca_ca_handler.py" >> data/volume/acme_srv.cfg
        sudo echo "xdb_file: volume/acme_ca/$XCA_DB_NAME" >> data/volume/acme_srv.cfg
        sudo echo "issuing_ca_name: $XCA_ISSUING_CA" >> data/volume/acme_srv.cfg
        sudo echo "passphrase: $XCA_PASSPHRASE" >> data/volume/acme_srv.cfg
        sudo echo "ca_cert_chain_list: [\"root-ca\"]" >> data/volume/acme_srv.cfg
        sudo echo "template_name: $XCA_TEMPLATE" >> data/volume/acme_srv.cfg
        sudo echo "allowed_domainlist: [\"bar.local\", \"*.acme\"]" >> data/volume/acme_srv.cfg

        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nemail_identifier_support: True\nemail_identifier_rewrite: True\ndns_validation_pause_timer: 5/g" data/volume/acme_srv.cfg
        sudo sed -i "s/debug: True/debug: True\nimap_server: mailserver.acme\nimap_port: 993\nimap_use_ssl: True\nsmtp_port: 587\nsmtp_use_tls: True\nusername: a2c@mailserver.acme\npassword: a2cstarter\nemail_address: a2c@mailserver.acme/g" data/volume/acme_srv.cfg
      env:
        XCA_PASSPHRASE: ${{ secrets.XCA_PASSPHRASE }}
        XCA_ISSUING_CA: ${{ secrets.XCA_ISSUING_CA }}
        XCA_TEMPLATE: ${{ secrets.XCA_TEMPLATE }}
        XCA_DB_NAME: ${{ secrets.XCA_DB_NAME }}

    - name: "Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/$EXEC_SCRIPT
        docker ps -a
      env:
        EXEC_SCRIPT: ${{ matrix.execscript }}

    - name: "Test enrollment"
      uses: ./.github/actions/acme_clients
      with:
        TEST_ADL: "true"

<<<<<<< HEAD
<<<<<<<< HEAD:.github/workflows/emailreply_challengevalidation.yml
    - name: "Install and enroll via acme-email"
      uses: ./.github/actions/wf_specific/emailreply_challengevalidation/acme_email_enroll
========
    - name: "Test http://acme-srv/directory is accessible"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "Test if https://acme-srv/directory is accessible"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory

    - name: "Enroll lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego --tls-skip-verify -s https://acme-srv -a --email "lego@example.com" --user-agent foo-bar-doo  -d lego.acme --http run
        sudo cat lego/certificates/lego.acme.issuer.crt |  awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}'
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt

    - name: "Sleep for 15s"
      uses: juliangruber/sleep-action@v2.0.3
>>>>>>>> devel:.github/workflows/headerinfo.yml
=======
    - name: "Install and enroll via acme-email"
      uses: ./.github/actions/wf_specific/emailreply_challengevalidation/acme_email_enroll
>>>>>>> devel
      with:
        INSTALL: "true"
        TO_FAIL: "true"

    - name: "Disable challenge validation"
      if: matrix.execscript == 'rpm_tester.sh'
      run: |
        sudo sed -i "s/challenge_validation_disable: False/challenge_validation_disable: True/g" data/acme_srv.cfg

    - name: "Disable challenge validation"
      if: matrix.execscript == 'django_tester.sh'
      run: |
        sudo sed -i "s/challenge_validation_disable: False/challenge_validation_disable: True/g" data/volume/acme_srv.cfg

    - name: "Reconfigure a2c"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/$EXEC_SCRIPT  restart
      env:
        EXEC_SCRIPT: ${{ matrix.execscript }}

    - name: "enroll via acme-email"
      uses: ./.github/actions/wf_specific/emailreply_challengevalidation/acme_email_enroll
      with:
        TO_FAIL: "false"

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo rm ${{ github.workspace }}/artifact/data/*.rpm
        sudo cp -rp mailserver/ ${{ github.workspace }}/artifact/mailserver/
        sudo mkdir -p ${{ github.workspace }}/artifact/acme_email
        # sudo cp acme_email/lets* ${{ github.workspace }}/artifact/acme_email/
        docker exec acme-srv cat /etc/nginx/nginx.conf.orig > ${{ github.workspace }}/artifact/data/nginx.conf.orig
        docker exec acme-srv cat /etc/nginx/nginx.conf > ${{ github.workspace }}/artifact/data/nginx.conf
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log data acme_email mailserver

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: emailreply_challenge_tests_rpm-rh${{ matrix.rhversion }}-${{ matrix.execscript }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
<<<<<<< HEAD

=======
>>>>>>> devel
