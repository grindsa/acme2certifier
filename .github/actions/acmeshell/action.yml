name: "acme_clients - enroll, renew and revoke certificates"
description: "Test if acme.sh, certbot and lego can enroll, renew and certificates"
inputs:
  ACME_SERVER:
    description: "ACME server URL"
    required: true
    default: "acme-srv"
  ALMA_START:
    description: "Start alma container"
    required: true
    default: "false"
  RENEWAL:
    description: "Renewal method"
    required: true
    default: "true"
  HOSTNAME_SUFFIX:
    description: "Hostname suffix"
    required: true
  NAME_SPACE:
    description: "Namespace"
    required: true
    default: "acme"
  IDEMPOTENT_FINALIZE:
    description: "Enable idempotent finalize testing"
    required: true
    default: "false"


runs:
  using: "composite"
  steps:

    - name: "Create directories"
      run: |
        mkdir -p acmeshell/
      shell: bash

    - name: "Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "Test if http://acme-srv/directory is accessible"
      run: docker run -i --rm --network $NAME_SPACE curlimages/curl -f http://$ACME_SERVER:$HTTP_PORT/directory
      shell: bash
      env:
        ACME_SERVER: ${{ inputs.ACME_SERVER }}
        HTTP_PORT: ${{ inputs.HTTP_PORT }}
        HTTPS_PORT: ${{ inputs.HTTPS_PORT }}
        NAME_SPACE: ${{ inputs.NAME_SPACE }}

    - name: "Install acmeshell"
      if: ${{ inputs.ALMA_START == 'true' }}
      run: |
        wget -c https://github.com/cpu/acmeshell/releases/download/v0.0.2-rc4/acmeshell_0.0.2-rc4_Linux_x86_64.tar.gz -O - | tar -xz
        mv acmeshell_0.0.2-rc4_Linux_x86_64/acmeshell acmeshell/
        chmod +x acmeshell/acmeshell
        ls -la acmeshell/
      shell: bash
      env:
        VERIFY_CERT: ${{ inputs.VERIFY_CERT }}
        ACME_SERVER: ${{ inputs.ACME_SERVER }}
        HTTP_PORT: ${{ inputs.HTTP_PORT }}
        HTTPS_PORT: ${{ inputs.HTTPS_PORT }}
        USE_RSA: ${{ inputs.USE_RSA }}
        HOSTNAME_SUFFIX: ${{ inputs.HOSTNAME_SUFFIX }}
        NAME_SPACE: ${{ inputs.NAME_SPACE }}

    - name: "Prepare shellfile including multiple finalize commands"
      if: ${{ inputs.ALMA_START == 'true' }}
      working-directory: acmeshell
      run: |
        echo "newAccount -contacts=foo@bar.local" > commands.shell
        echo "newOrder -identifiers=acmeshell.acme" >> commands.shell
        echo "getOrder -order 0" >> commands.shell
        echo "getAuthz -order=0 -identifier=acmeshell.acme" >> commands.shell
        echo "getChall -order=0 -identifier=acmeshell.acme -type=http-01" >> commands.shell
        echo "solve -order=0 -identifier=acmeshell.acme -challengeType=http-01" >> commands.shell
        echo "finalize -order=0" >> commands.shell
        echo "finalize -order=0" >> commands.shell
      shell: bash

    - name: "Run alma container"
      if: ${{ inputs.ALMA_START == 'true' }}
      run: |
        docker run -id --name alma --network $NAME_SPACE -v $(pwd)/acmeshell:/acmeshell almalinux/9-minimal
        sleep 5
        docker ps
        docker exec alma ls -la /acmeshell
      shell: bash
      env:
        NAME_SPACE: ${{ inputs.NAME_SPACE }}

    - name: "Run acmeshell enroll"
      working-directory: acmeshell
      run: |
        rm -f acmeshell.enroll.log
        ls -la .
        docker exec alma bash -c 'curl -f http://acme-srv/directory'
        docker exec alma bash -c '/acmeshell/acmeshell -directory http://acme-srv -postAsGet=true -printResponses -printRequests -contact=grindsa@foo.bar -in /acmeshell/commands.shell &> /acmeshell/acmeshell.enroll.log'
      shell: bash
      env:
        ACME_SERVER: ${{ inputs.ACME_SERVER }}
        NAME_SPACE: ${{ inputs.NAME_SPACE }}

    - name: "Check acmeshell enroll log without idempotent finalize option"
      working-directory: acmeshell
      id: acmeshell01
      continue-on-error: true
      run: |
        ls -la .
        grep "urn:ietf:params:acme:error:orderNotReady" acmeshell.enroll.log
      shell: bash

    - name: "Check  result "
      if:  ${{ (inputs.IDEMPOTENT_FINALIZE == 'false') && (steps.acmeshell01.outcome != 'success')}}
      run: |
        echo "legofail outcome is ${{steps.acmeshell01.outcome }}"
        exit 1
      shell: bash

    - name: "Check  result "
      if:  ${{ (inputs.IDEMPOTENT_FINALIZE == 'true') && (steps.acmeshell01.outcome != 'failure')}}
      run: |
        echo "legofail outcome is ${{steps.acmeshell01.outcome }}"
        exit 1
      shell: bash
