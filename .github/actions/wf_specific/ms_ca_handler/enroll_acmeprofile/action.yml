name: "enroll_acmeprofile"
description: "enroll_acmeprofile"
inputs:
  NAME_SPACE:
    description: "namespace"
    required: true
    default: "acme"
  DEPLOYMENT_TYPE:
    description: "Deployment type"
    required: true
    default: "rpm"
  TAIL_NUMBER:
    description: "Number of lines to tail"
    required: false
    default: "500"

runs:
  using: "composite"
  steps:
  - name: "Sleep for 10s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 10s

  - name: "Test http://acme-srv/directory is accessible"
    run: docker run -i --rm --network ${{ inputs.NAME_SPACE }} curlimages/curl -f http://acme-srv/directory
    shell: bash
    env:
      NAME_SPACE: ${{ inputs.NAME_SPACE }}

  - name: "Test if https://acme-srv/directory is accessible"
    run: docker run -i --rm --network ${{ inputs.NAME_SPACE }} curlimages/curl --insecure -f https://acme-srv/directory
    shell: bash
    env:
      NAME_SPACE: ${{ inputs.NAME_SPACE }}

  - name: "ACME Profile - Clear logs"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      fi
    shell: bash

  - name: "ACME Profile - 01 Enroll lego with template in acme_srv.cfg (WebServer)"
    run: |
      sudo rm -rf lego/
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network ${{ inputs.NAME_SPACE }} goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.${{ inputs.NAME_SPACE }} --http run
      sudo openssl verify -CAfile cert-1.pem lego/certificates/lego.${{ inputs.NAME_SPACE }}.crt
      sudo openssl x509 -in lego/certificates/lego.${{ inputs.NAME_SPACE }}.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"
    shell: bash

  - name: "ACME Profile - 01 - Check logs"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs | grep "template: WebServer"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
        docker exec -i acme-srv tail -n ${{ inputs.TAIL_NUMBER}} /var/log/messages | grep "template: WebServer"
      fi
    shell: bash

  - name: "ACME Profile - 02 - Enroll lego with a unknown template_name"
    id: legofail01
    continue-on-error: true
    run: |
      sudo rm -rf lego/*
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network ${{ inputs.NAME_SPACE }} goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run --profile unknown
    shell: bash

  - name: "ACME Profile - 02 - check  result "
    if: steps.legofail01.outcome != 'failure'
    run: |
      echo "legofail outcome is ${{steps.legofail01.outcome }}"
      exit 1
    shell: bash

  - name: "Sleep for 5s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 5s

  - name: "ACME Profile - 02 - Check logs"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs | grep "unknown"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
        docker exec -i acme-srv tail -n ${{ inputs.TAIL_NUMBER}} /var/log/messages | grep unknown
      fi
    shell: bash

  - name: "ACME Profile - 03 - Enroll lego with template submitted in command line (WebServerModified)"
    run: |
      sudo rm -rf lego/
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network ${{ inputs.NAME_SPACE }} goacme/lego -s http://acme-srv -a --email "lego@example.com" --key-type=rsa2048 -d lego.${{ inputs.NAME_SPACE }} --http run --profile WebServerModified
      sudo openssl verify -CAfile cert-1.pem lego/certificates/lego.${{ inputs.NAME_SPACE }}.crt
      sudo openssl x509 -in lego/certificates/lego.${{ inputs.NAME_SPACE }}.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"
    shell: bash

  - name: "ACME Profile - 03 - Check logs"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs | grep "template: WebServerModified"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
        docker exec -i acme-srv tail -n ${{ inputs.TAIL_NUMBER}} /var/log/messages | grep "template: WebServerModified"
      fi
    shell: bash
