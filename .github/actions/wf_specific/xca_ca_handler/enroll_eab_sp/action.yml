name: "enroll_eab"
description: "enroll_eab"
inputs:
  DEPLOYMENT_TYPE:
    description: "Deployment type"
    required: true
    default: "container"


runs:
  using: "composite"
  steps:
  - name: "EAB - Sleep for 10s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 10s

  - name: "EAB - Test http://acme-srv/directory is accessible"
    run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory
    shell: bash

  - name: "EAB - Test if https://acme-srv/directory is accessible"
    run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory
    shell: bash

  - name: "EAB SP - 01a - SUCC - Enroll acme - 1st list entry"
    run: |
      mkdir -p acme-sh
      sudo rm -rf acme-sh/*
      openssl genrsa -out acme-sh/acme-sh.acme.key 2048
      openssl req -new -key acme-sh/acme-sh.acme.key -subj '/CN=acme-sh.acme/O=acme corp/OU=acme1/C=AC/serialNumber=00-11-22-33' --addext "subjectAltName = DNS:acme-sh.acme" -outform pem -out acme-sh/acme-sh.acme.csr
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --register-account --server http://acme-srv --accountemail 'acme-sh@example.com' --eab-kid keyid_00 --eab-hmac-key V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --debug 3
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name acme-sh neilpang/acme.sh:latest --signcsr --csr acme.sh/acme-sh.acme.csr --server http://acme-srv --standalone --debug 1 --output-insecure --insecure
      awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < acme-sh/acme-sh.acme/ca.cer
      openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  acme-sh/acme-sh.acme/acme-sh.acme.cer
      openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -text -noout
    shell: bash

  - name: "EAB SP - 01a - SUCC - Enroll lego - 1st list entry"
    run: |
      sudo mkdir -p lego
      sudo rm -rf lego/*
      sudo openssl genrsa -out lego/lego.acme.key 2048
      sudo openssl req -new -key lego/lego.acme.key -subj '/CN=lego.acme/O=acme corp/OU=acme1/C=AC/serialNumber=00-11-22-33' --addext "subjectAltName = DNS:lego.acme" -outform pem -out lego/lego.acme.csr
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --eab --kid keyid_00 --hmac V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --csr .lego/lego.acme.csr --http run
      sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  lego/certificates/lego.acme.crt
      sudo openssl x509 -in lego/certificates/lego.acme.crt -text -noout
    shell: bash

  - name: "EAB SP - 01B - SUCC - Enroll acme - 2nd list entry"
    run: |
      sudo rm -rf acme-sh/*
      openssl genrsa -out acme-sh/acme-sh.acme.key 2048
      openssl req -new -key acme-sh/acme-sh.acme.key -subj '/CN=acme-sh.acme/O=acme corp/OU=acme2/C=AC/serialNumber=00-11-22-33' --addext "subjectAltName = DNS:acme-sh.acme" -outform pem -out acme-sh/acme-sh.acme.csr
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --register-account --server http://acme-srv --accountemail 'acme-sh@example.com' --eab-kid keyid_00 --eab-hmac-key V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --debug 3
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name acme-sh neilpang/acme.sh:latest --signcsr --csr acme.sh/acme-sh.acme.csr --server http://acme-srv --standalone --debug 1 --output-insecure --insecure
      openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  acme-sh/acme-sh.acme/acme-sh.acme.cer
      openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -text -noout
    shell: bash

  - name: "EAB SP - 01B - SUCC - Enroll lego - 2nd list entry"
    run: |
      sudo rm -rf lego/*
      sudo openssl genrsa -out lego/lego.acme.key 2048
      sudo openssl req -new -key lego/lego.acme.key -subj '/CN=lego.acme/O=acme corp/OU=acme2/C=AC/serialNumber=00-11-22-33' --addext "subjectAltName = DNS:lego.acme" -outform pem -out lego/lego.acme.csr
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --eab --kid keyid_00 --hmac V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --csr .lego/lego.acme.csr --http run
      sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  lego/certificates/lego.acme.crt
      sudo openssl x509 -in lego/certificates/lego.acme.crt -text -noout
    shell: bash

  - name: "EAB SP - 01C - FAIL - Enroll acme - entry not in list"
    id: acmefail01
    continue-on-error: true
    run: |
      sudo rm -rf acme-sh/*
      openssl genrsa -out acme-sh/acme-sh.acme.key 2048
      openssl req -new -key acme-sh/acme-sh.acme.key -subj '/CN=acme-sh.acme/O=acme corp/OU=acme3/C=AC/serialNumber=00-11-22-33' --addext "subjectAltName = DNS:acme-sh.acme" -outform pem -out acme-sh/acme-sh.acme.csr
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --register-account --server http://acme-srv --accountemail 'acme-sh@example.com' --eab-kid keyid_00 --eab-hmac-key V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --debug 3
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name acme-sh neilpang/acme.sh:latest --signcsr --csr acme.sh/acme-sh.acme.csr --server http://acme-srv --standalone --debug 1 --output-insecure --insecure
      openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  acme-sh/acme-sh.acme/acme-sh.acme.cer
      openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -text -noout
    shell: bash

  - name: "Check result"
    if: steps.acmefail01.outcome != 'failure'
    run: |
      echo "acmefail outcome is ${{steps.acmefail01.outcome }}"
      exit 1
    shell: bash

  - name: "Sleep for 2s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 2s

  - name: "Check logs for errors"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs > docker-compose.log
        cat docker-compose.log | grep "organizationalUnitName: value: acme3 expected: \['acme1', 'acme2'\]"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      # elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
      #  docker exec acme-srv grep "organizationalUnitName: value: acme3 expected: \['acme1', 'acme2'\]" /var/log/messages
      fi
    shell: bash

  - name: "EAB SP - 01C - Fail - Enroll lego - entry not in list"
    id: legofail01
    continue-on-error: true
    run: |
      sudo rm -rf lego/*
      sudo openssl genrsa -out lego/lego.acme.key 2048
      sudo openssl req -new -key lego/lego.acme.key -subj '/CN=lego.acme/O=acme corp/OU=acme3/C=AC/serialNumber=00-11-22-33' --addext "subjectAltName = DNS:lego.acme" -outform pem -out lego/lego.acme.csr
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --eab --kid keyid_00 --hmac V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --csr .lego/lego.acme.csr --http run
      sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  lego/certificates/lego.acme.crt
      sudo openssl x509 -in lego/certificates/lego.acme.crt -text -noout
    shell: bash

  - name: "Check result"
    if: steps.legofail01.outcome != 'failure'
    run: |
      echo "legofail outcome is ${{steps.legofail01.outcome }}"
      exit 1
    shell: bash

  - name: "Sleep for 2s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 2s

  - name: "Check logs for errors"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs > docker-compose.log
        cat docker-compose.log | grep "organizationalUnitName: value: acme3 expected: \['acme1', 'acme2'\]"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      # elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
      #  docker exec acme-srv grep "organizationalUnitName: value: acme3 expected: \['acme1', 'acme2'\]" /var/log/messages
      fi
    shell: bash

  - name: "EAB SP - 02 - FAIL - Enroll acme - wildcard entry not present"
    id: acmefail02
    continue-on-error: true
    run: |
      sudo rm -rf acme-sh/*
      openssl genrsa -out acme-sh/acme-sh.acme.key 2048
      openssl req -new -key acme-sh/acme-sh.acme.key -subj '/CN=acme-sh.acme/O=acme corp/OU=acme1/C=AC' --addext "subjectAltName = DNS:acme-sh.acme" -outform pem -out acme-sh/acme-sh.acme.csr
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --register-account --server http://acme-srv --accountemail 'acme-sh@example.com' --eab-kid keyid_00 --eab-hmac-key V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --debug 3
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name acme-sh neilpang/acme.sh:latest --signcsr --csr acme.sh/acme-sh.acme.csr --server http://acme-srv --standalone --debug 1 --output-insecure --insecure
      openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  acme-sh/acme-sh.acme/acme-sh.acme.cer
      openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -text -noout
    shell: bash

  - name: "Check result"
    if: steps.acmefail02.outcome != 'failure'
    run: |
      echo "acmefail outcome is ${{steps.acmefail02.outcome }}"
      exit 1
    shell: bash

  - name: "Sleep for 2s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 2s

  - name: "Check logs for errors"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs > docker-compose.log
        cat docker-compose.log | grep "failed for: \['serialNumber'\]"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      # elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
      #  docker exec acme-srv grep "failed for: \['serialNumber'\]" /var/log/messages
      fi
    shell: bash

  - name: "EAB SP - 02 - FAIL - Enroll lego - wildcard entry not present"
    id: legofail02
    continue-on-error: true
    run: |
      sudo rm -rf lego/*
      sudo openssl genrsa -out lego/lego.acme.key 2048
      sudo openssl req -new -key lego/lego.acme.key -subj '/CN=lego.acme/O=acme corp/OU=acme1/C=AC' --addext "subjectAltName = DNS:lego.acme" -outform pem -out lego/lego.acme.csr
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --eab --kid keyid_00 --hmac V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --csr .lego/lego.acme.csr --http run
      sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  lego/certificates/lego.acme.crt
      sudo openssl x509 -in lego/certificates/lego.acme.crt -text -noout
    shell: bash

  - name: "Check result"
    if: steps.legofail02.outcome != 'failure'
    run: |
      echo "legofail outcome is ${{steps.legofail02.outcome }}"
      exit 1
    shell: bash

  - name: "Sleep for 2s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 2s

  - name: "Check logs for errors"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs > docker-compose.log
        cat docker-compose.log | grep "failed for: \['serialNumber'\]"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      # elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
      #  docker exec acme-srv grep "failed for: \['serialNumber'\]" /var/log/messages
      fi
    shell: bash

  - name: "EAB SP - 03 - FAIL - Enroll acme - string check failed"
    id: acmefail03
    continue-on-error: true
    run: |
      sudo rm -rf acme-sh/*
      openssl genrsa -out acme-sh/acme-sh.acme.key 2048
      openssl req -new -key acme-sh/acme-sh.acme.key -subj '/CN=acme-sh.acme/O=noacme corp/OU=acme2/C=AC/serialNumber=00-11-22-33' --addext "subjectAltName = DNS:acme-sh.acme" -outform pem -out acme-sh/acme-sh.acme.csr
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --register-account --server http://acme-srv --accountemail 'acme-sh@example.com' --eab-kid keyid_00 --eab-hmac-key V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --debug 3
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name acme-sh neilpang/acme.sh:latest --signcsr --csr acme.sh/acme-sh.acme.csr --server http://acme-srv --standalone --debug 1 --output-insecure --insecure
      openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  acme-sh/acme-sh.acme/acme-sh.acme.cer
      openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -text -noout
    shell: bash

  - name: "Check result"
    if: steps.acmefail03.outcome != 'failure'
    run: |
      echo "acmefail outcome is ${{steps.acmefail03.outcome }}"
      exit 1
    shell: bash

  - name: "Sleep for 2s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 2s

  - name: "Check logs for errors"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs > docker-compose.log
        cat docker-compose.log | grep "failed for: organizationName: value: noacme corp expected: acme corp"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      # elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
      #  docker exec acme-srv grep "failed for: organizationName: value: noacme corp expected: acme corp" /var/log/messages
      fi
    shell: bash

  - name: "EAB SP - 03 - FAIL - Enroll lego - string check failed"
    id: legofail03
    continue-on-error: true
    run: |
      sudo rm -rf lego/*
      sudo openssl genrsa -out lego/lego.acme.key 2048
      sudo openssl req -new -key lego/lego.acme.key -subj '/CN=lego.acme/O=noacme corp/OU=acme2/C=AC/serialNumber=00-11-22-33' --addext "subjectAltName = DNS:lego.acme" -outform pem -out lego/lego.acme.csr
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --eab --kid keyid_00 --hmac V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --csr .lego/lego.acme.csr --http run
      sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  lego/certificates/lego.acme.crt
      sudo openssl x509 -in lego/certificates/lego.acme.crt -text -noout
    shell: bash

  - name: "Check result"
    if: steps.legofail03.outcome != 'failure'
    run: |
      echo "legofail outcome is ${{steps.legofail03.outcome }}"
      exit 1
    shell: bash

  - name: "Sleep for 2s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 2s

  - name: "Check logs for errors"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs > docker-compose.log
        cat docker-compose.log | grep "failed for: organizationName: value: noacme corp expected: acme corp"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      # elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
      #  docker exec acme-srv grep "failed for: organizationName: value: noacme corp expected: acme corp" /var/log/messages
      fi
    shell: bash

  - name: "EAB SP - 04 - FAIL - Enroll acme - string parameter not present"
    id: acmefail04
    continue-on-error: true
    run: |
      sudo rm -rf acme-sh/*
      openssl genrsa -out acme-sh/acme-sh.acme.key 2048
      openssl req -new -key acme-sh/acme-sh.acme.key -subj '/CN=acme-sh.acme/O=acme corp/OU=acme2/serialNumber=00-11-22-33' --addext "subjectAltName = DNS:acme-sh.acme" -outform pem -out acme-sh/acme-sh.acme.csr
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --register-account --server http://acme-srv --accountemail 'acme-sh@example.com' --eab-kid keyid_00 --eab-hmac-key V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --debug 3
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name acme-sh neilpang/acme.sh:latest --signcsr --csr acme.sh/acme-sh.acme.csr --server http://acme-srv --standalone --debug 1 --output-insecure --insecure
      openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  acme-sh/acme-sh.acme/acme-sh.acme.cer
      openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -text -noout
    shell: bash

  - name: "Check result"
    if: steps.acmefail04.outcome != 'failure'
    run: |
      echo "acmefail outcome is ${{steps.acmefail04.outcome }}"
      exit 1
    shell: bash

  - name: "Sleep for 2s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 2s

  - name: "Check logs for errors"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs > docker-compose.log
        cat docker-compose.log | grep "failed for: \['countryName'\]"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      # elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
      #  docker exec acme-srv grep "failed for: \['countryName'\]" /var/log/messages
      fi
    shell: bash

  - name: "EAB SP - 04 - FAIL - Enroll acme - string parameter not present"
    id: legofail04
    continue-on-error: true
    run: |
      sudo rm -rf lego/*
      sudo openssl genrsa -out lego/lego.acme.key 2048
      sudo openssl req -new -key lego/lego.acme.key -subj '/CN=lego.acme/O=acme corp/OU=acme2/serialNumber=00-11-22-33' --addext "subjectAltName = DNS:lego.acme" -outform pem -out lego/lego.acme.csr
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --eab --kid keyid_00 --hmac V2VfbmVlZF9hbm90aGVyX3ZlcnkfX2xvbmdfaG1hY190b19jaGVja19lYWJfZm9yX2tleWlkXzAwX2FzX2xlZ29fZW5mb3JjZXNfYW5faG1hY19sb25nZXJfdGhhbl8yNTZfYml0cw --csr .lego/lego.acme.csr --http run
      sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem  lego/certificates/lego.acme.crt
      sudo openssl x509 -in lego/certificates/lego.acme.crt -text -noout
    shell: bash

  - name: "Check result"
    if: steps.legofail04.outcome != 'failure'
    run: |
      echo "legofail outcome is ${{steps.legofail04.outcome }}"
      exit 1
    shell: bash

  - name: "Sleep for 2s"
    uses: juliangruber/sleep-action@v2.0.3
    with:
      time: 2s

  - name: "Check logs for errors"
    working-directory: examples/Docker/
    run: |
      if [ ${{ inputs.DEPLOYMENT_TYPE }} == "container" ]; then
        docker-compose logs > docker-compose.log
        cat docker-compose.log | grep "failed for: \['countryName'\]"
        sudo truncate -s 0 $(docker inspect --format='{{.LogPath}}' acme2certifier_acme-srv_1)
      # elif [ ${{ inputs.DEPLOYMENT_TYPE }} == "rpm" ]; then
      #  docker exec acme-srv grep "failed for: \['countryName'\]" /var/log/messages
      fi
    shell: bash

  - name: "EAB - 05a - Enroll acme with challenge validation disabled in kid.json"
    run: |
      sudo rm -rf acme-sh/*
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --register-account --server http://acme-srv --accountemail 'acme-sh@example.com' --eab-kid keyid_01 --eab-hmac-key YW5vdXRoZXJfdmVyeV9sb25nX2htYWNfZm9yX2tleWlkXzAxX3doaWNoIHdpbGxfYmUgdXNlZF9kdXJpbmcgcmVncmVzc2lvbg --debug 3
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv -d www.example.local --standalone --debug 3 --output-insecure
      openssl x509 -in acme-sh/www.example.local_ecc/www.example.local.cer -text -noout | grep "Issuer: CN = root-ca"
      openssl x509 -in acme-sh/www.example.local_ecc/www.example.local.cer -ext keyUsage -noout | grep "Digital Signature, Non Repudiation"
      openssl x509 -in acme-sh/www.example.local_ecc/www.example.local.cer -ext extendedKeyUsage -noout | grep "TLS Web Client Authentication, Code Signing"
    shell: bash

  - name: "EAB - 05a - Enroll lego with challenge validation disabled in kid.json"
    run: |
      sudo rm -rf lego/*
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --eab --kid keyid_01 --hmac YW5vdXRoZXJfdmVyeV9sb25nX2htYWNfZm9yX2tleWlkXzAxX3doaWNoIHdpbGxfYmUgdXNlZF9kdXJpbmcgcmVncmVzc2lvbg -d www.example.local --http run
      sudo openssl x509 -in lego/certificates/www.example.local.crt -ext extendedKeyUsage -noout
      sudo openssl x509 -in lego/certificates/www.example.local.crt -text -noout | grep "Issuer: CN = root-ca"
      sudo openssl x509 -in lego/certificates/www.example.local.crt -text -ext keyUsage | grep "Digital Signature, Non Repudiation"
      sudo openssl x509 -in lego/certificates/www.example.local.crt -text -ext extendedKeyUsage | grep "TLS Web Client Authentication, Code Signing"
    shell: bash

  - name: "EAB - 05b - Enroll acme - challenge validations fails"
    id: acmefail07
    continue-on-error: true
    run: |
      sudo rm -rf acme-sh/*
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --register-account --server http://acme-srv --accountemail 'acme-sh@example.com' --eab-kid keyid_02 --eab-hmac-key dGhpc19pc19hX3ZlcnlfbG9uZ19obWFjX3RvX21ha2Vfc3VyZV90aGF0X2l0c19tb3JlX3RoYW5fMjU2X2JpdHM --debug 3
      docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv -d www.example.local --standalone --debug 3 --output-insecure
    shell: bash

  - name: "EAB - 05b - check  result "
    if: steps.acmefail07.outcome != 'failure'
    run: |
      echo "acmefail outcome is ${{steps.acmefail07.outcome }}"
      exit 1
    shell: bash

  - name: "EAB - 05b - Enroll lego - challenge validations fails"
    id: legofail07
    continue-on-error: true
    run: |
      sudo rm -rf lego/*
      docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --eab --kid keyid_02 --hmac dGhpc19pc19hX3ZlcnlfbG9uZ19obWFjX3RvX21ha2Vfc3VyZV90aGF0X2l0c19tb3JlX3RoYW5fMjU2X2JpdHM -d www.example.local --http run
    shell: bash

  - name: "EAB - 05b - check  result "
    if: steps.legofail07.outcome != 'failure'
    run: |
      echo "legofail outcome is ${{steps.legofail07.outcome }}"
      exit 1
    shell: bash
